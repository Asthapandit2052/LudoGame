<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Ludo Game</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <style>
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background-color: #f8f9fa;
    }
    .game-board {
      display: grid;
      grid-template-columns: repeat(15, 1fr);
      grid-template-rows: repeat(15, 1fr);
      width: 600px;
      height: 600px;
      gap: 1px;
    }
    .cell {
      width: 100%;
      height: 100%;
      border: 1px solid #000;
    }
    .safe-cell {
      background-color: lightgreen;
    }
    .start-cell {
      background-color: lightblue;
    }
    .home-cell {
      background-color: gold;
    }
    .player-piece {
      width: 80%;
      height: 80%;
      border-radius: 50%;
      margin: 10%;
    }
    .btn-container {
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <div class="container text-center">
    <h1 class="mb-3">Ludo Game</h1>
    <div class="game-board" id="gameBoard"></div>
    <div class="btn-container">
      <button id="rollDice" class="btn btn-primary">Roll Dice</button>
      <p id="diceResult" class="mt-3">Roll Result: 0</p>
    </div>
  </div>

  <script>
    const gameBoard = document.getElementById('gameBoard');
    const rollDiceButton = document.getElementById('rollDice');
    const diceResult = document.getElementById('diceResult');

    // Generate board cells
    for (let i = 0; i < 15 * 15; i++) {
      const cell = document.createElement('div');
      cell.classList.add('cell');
      gameBoard.appendChild(cell);
    }

    // Mark special cells
    const specialCells = [112, 113, 114, 115];
    specialCells.forEach(index => {
      gameBoard.children[index].classList.add('safe-cell');
    });

    const startCells = [0, 14, 210, 224];
    startCells.forEach(index => {
      gameBoard.children[index].classList.add('start-cell');
    });

    const homeCells = [106, 107, 108, 121, 122, 123];
    homeCells.forEach(index => {
      gameBoard.children[index].classList.add('home-cell');
    });

    // Player piece
    const playerPiece = document.createElement('div');
    playerPiece.classList.add('player-piece');
    playerPiece.style.backgroundColor = 'red';
    gameBoard.children[0].appendChild(playerPiece);

    let playerPosition = 0;

    rollDiceButton.addEventListener('click', () => {
      const diceRoll = Math.floor(Math.random() * 6) + 1;
      diceResult.textContent = `Roll Result: ${diceRoll}`;

      const nextPosition = playerPosition + diceRoll;
      if (nextPosition < 225) {
        gameBoard.children[playerPosition].innerHTML = '';
        playerPosition = nextPosition;
        gameBoard.children[playerPosition].appendChild(playerPiece);
      }
    });
  </script>
</body>
</html>
